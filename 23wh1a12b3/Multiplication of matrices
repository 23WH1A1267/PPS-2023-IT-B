//Multiplication of matrices.
#include <stdio.h>
// Function to multiply two matrices
void multiplyMatrices(int firstMatrix[10][10], int secondMatrix[10][10], int result[10][10], int rows1, int columns1, int rows2, int columns2) {
    // Check if matrices can be multiplied
    if (columns1 != rows2)
     {
        printf("Matrices cannot be multiplied.\n");
        return;
    }
    for (int i = 0; i < rows1; ++i)
     {
        for (int j = 0; j < columns2; ++j)
         {
            result[i][j] = 0;
            for (int k = 0; k < columns1; ++k)
             {
                result[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
            }
        }
    }
}

// Function to display a matrix
void displayMatrix(int matrix[10][10], int rows, int columns) {
    for (int i = 0; i < rows; ++i)
     {
        for (int j = 0; j < columns; ++j)
         {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int firstMatrix[10][10], secondMatrix[10][10], result[10][10];
    int rows1, columns1, rows2, columns2;
    // Input size of the first matrix
    printf("Enter number of rows and columns for the first matrix: ");
    scanf("%d %d", &rows1, &columns1);
    // Input elements of the first matrix
    printf("Enter elements of the first matrix:\n");
    for (int i = 0; i < rows1; ++i)
     {
        for (int j = 0; j < columns1; ++j)
         {
            scanf("%d", &firstMatrix[i][j]);
        }
    }
    // Input size of the second matrix
    printf("Enter number of rows and columns for the second matrix: ");
    scanf("%d %d", &rows2, &columns2);
    // Input elements of the second matrix
    printf("Enter elements of the second matrix:\n");
    for (int i = 0; i < rows2; ++i)
     {
        for (int j = 0; j < columns2; ++j)
        {
            scanf("%d", &secondMatrix[i][j]);
        }
    }
    // Call function to multiply matrices
    multiplyMatrices(firstMatrix, secondMatrix, result, rows1, columns1, rows2, columns2);
    // Display the result matrix
    printf("\nResultant Matrix:\n");
    displayMatrix(result, rows1, columns2);
    return 0;
}
